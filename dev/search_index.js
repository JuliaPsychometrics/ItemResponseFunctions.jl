var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = ItemResponseFunctions","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Models","page":"API","title":"Models","text":"","category":"section"},{"location":"api/#Dichotomous-response-models","page":"API","title":"Dichotomous response models","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"OneParameterLogisticModel\nOneParameterLogisticPlusGuessingModel\nTwoParameterLogisticModel\nThreeParameterLogisticModel\nFourParameterLogisticModel\nFiveParameterLogisticModel","category":"page"},{"location":"api/#ItemResponseFunctions.OneParameterLogisticModel","page":"API","title":"ItemResponseFunctions.OneParameterLogisticModel","text":"abstract type OneParameterLogisticModel <: DichotomousItemResponseModel\n\nAn abstract representation of a 1 Parameter Logistic Model with an item response function given by\n\nP(Y_ij=1theta_iboldsymbolbeta_j) = mathrmlogistic(theta_i - b_j)\n\nThe item parameter beta can be passed as a number or a destructurable object with the following fields:\n\nb: the item difficulty (location)\n\nAlias: OnePL\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.OneParameterLogisticPlusGuessingModel","page":"API","title":"ItemResponseFunctions.OneParameterLogisticPlusGuessingModel","text":"abstract type OneParameterLogisticPlusGuessingModel <: DichotomousItemResponseModel\n\nAn abstract representation of the 1 Parameter Logistic + Guessing Model with an item response function given by\n\nP(Y_ij=1theta_iboldsymbolbeta_j) = c + (1 - c) cdot mathrmlogistic(theta_i - b_j)\n\nThe item parameters beta must be a destructurable object with the following fields:\n\nb: the item difficulty (location)\nc: the lower asymptote\n\nAlias: OnePLG\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.TwoParameterLogisticModel","page":"API","title":"ItemResponseFunctions.TwoParameterLogisticModel","text":"abstract type TwoParameterLogisticModel <: DichotomousItemResponseModel\n\nAn abstract representation of a 2 Parameter Logistic Model with an item response function given by\n\nP(Y_ij=1theta_iboldsymbolbeta_j) = mathrmlogistic(a_j(theta_i - b_j))\n\nThe item parameters beta must be a destructurable object with the following fields:\n\na: the item discrimination\nb: the item difficulty (location)\n\nAlias: TwoPL\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.ThreeParameterLogisticModel","page":"API","title":"ItemResponseFunctions.ThreeParameterLogisticModel","text":"abstract type ThreeParameterLogisticModel <: DichotomousItemResponseModel\n\nAn abstract representation of a 3 Parameter Logistic Model with an item response function given by\n\nP(Y_ij=1theta_iboldsymbolbeta_j) = c_j + (1 - c_j)cdotmathrmlogistic(a_j(theta_i - b_j))\n\nThe item parameters beta must be a destructurable object with the following fields:\n\na: the item discrimination\nb: the item difficulty (location)\nc: the lower asymptote\n\nAlias: ThreePL\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.FourParameterLogisticModel","page":"API","title":"ItemResponseFunctions.FourParameterLogisticModel","text":"abstract type FourParameterLogisticModel <: DichotomousItemResponseModel\n\nAn abstract representation of a 4 Parameter Logistic Model with an item response function given by\n\nP(Y_ij=1theta_iboldsymbolbeta_j) = c_j + (d_j - c_j)cdotmathrmlogistic(a_j(theta_i - b_j))\n\nThe item parameters beta must be a destructurable object with the following fields:\n\na: the item discrimination\nb: the item difficulty (location)\nc: the lower asymptote\nd: the upper asymptote\n\nAlias: FourPL\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.FiveParameterLogisticModel","page":"API","title":"ItemResponseFunctions.FiveParameterLogisticModel","text":"abstract type FiveParameterLogisticModel <: DichotomousItemResponseModel\n\nAn abstract representation of a 5 Parameter Logistic Model with an item response function given by\n\nP(Y_ij=1theta_iboldsymbolbeta_j) = c_j + (d_j - c_j)cdotmathrmlogistic(a_j(theta_i - b_j))^e_j\n\nThe item parameters beta must be a destructurable object with the following fields:\n\na: the item discrimination\nb: the item difficulty (location)\nc: the lower asymptote\nd: the upper asymptote\ne: the item stiffness\n\nAlias: FivePL\n\n\n\n\n\n","category":"type"},{"location":"api/#Polytomous-response-models","page":"API","title":"Polytomous response models","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PartialCreditModel\nGeneralizedPartialCreditModel\nRatingScaleModel\nGeneralizedRatingScaleModel","category":"page"},{"location":"api/#ItemResponseFunctions.PartialCreditModel","page":"API","title":"ItemResponseFunctions.PartialCreditModel","text":"abstract type PartialCreditModel <: PolytomousItemResponseModel\n\nAn abstract type representing a Partial Credit Model with an item category response function given by\n\nP(Y_ij = y theta_i boldsymbolbeta_j) =     fracexp sum_s=1^y (theta_i - b_j + t_js)     1 + sum_k=1^K_j exp sum_s=1^k (theta_i - b_j + t_js)\n\nThe item parameters beta must be a destructurable object with the following fields:\n\nb: the item difficulty (location)\nt: a vector of threshold parameters\n\nAlias: PCM\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.GeneralizedPartialCreditModel","page":"API","title":"ItemResponseFunctions.GeneralizedPartialCreditModel","text":"abstract type GeneralizedPartialCreditModel <: PolytomousItemResponseModel\n\nAn abstract type representing a Generalized Partial Credit Model with an item category response function given by\n\nP(Y_ij = y theta_i boldsymbolbeta_j) =     fracexp sum_s=1^y (a_j (theta_i - b_j + t_js))     1 + sum_k=1^K_j exp sum_s=1^k (a_j (theta_i - b_j + t_js))\n\nThe item parameters beta must be a destructurable object with the following fields:\n\na: the item discrimination\nb: the item difficulty (location)\nt: a vector of threshold parameters\n\nAlias: GPCM\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.RatingScaleModel","page":"API","title":"ItemResponseFunctions.RatingScaleModel","text":"abstract type RatingScaleModel <: PolytomousItemResponseModel\n\nAn abstract type representing a Rating Scale Model with an item category response function given by\n\nP(Y_ij = y theta_i boldsymbolbeta_j) =     fracexp sum_s=1^y (theta_i - b_j + t_s)     1 + sum_k=1^K_j exp sum_s=1^k (theta_i - b_j + t_s)\n\nThe item parameters beta must be a destructurable object with the following fields:\n\nb: the item difficulty (location)\nt: a vector of threshold parameters\n\nAlias: RSM\n\n\n\n\n\n","category":"type"},{"location":"api/#ItemResponseFunctions.GeneralizedRatingScaleModel","page":"API","title":"ItemResponseFunctions.GeneralizedRatingScaleModel","text":"abstract type GeneralizedRatingScaleModel <: PolytomousItemResponseModel\n\nAn abstract type representing a Generalized Rating ScaleModel with an item category response function given by\n\nP(Y_ij = y theta_i boldsymbolbeta_j) =     fracexp sum_s=1^y (a_j (theta_i - b_j + t_s))     1 + sum_k=1^K_j exp sum_s=1^k (a_j (theta_i - b_j + t_s))\n\nThe item parameters beta must be a destructurable object with the following fields:\n\na: the item discrimination\nb: the item difficulty (location)\nt: a vector of threshold parameters\n\nAlias: GRSM\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/#Item-Response-Functions","page":"API","title":"Item Response Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"irf\nirf!\niif\nexpected_score\ninformation","category":"page"},{"location":"api/#AbstractItemResponseModels.irf","page":"API","title":"AbstractItemResponseModels.irf","text":"irf(M, theta, beta, y)\n\n\nEvaluate the item response function of an item response model M for response y at the ability value theta given item parameters beta.\n\nIf y is omitted, then the item response function is evaluated for all possible responses.\n\nExamples\n\n1 Parameter Logistic Model\n\njulia> irf(OnePL, 0.0, 0.0, 1)\n0.5\n\njulia> irf(OnePL, 0.0, (; b = 0.5), 1)\n0.37754066879814546\n\njulia> irf(OnePL, 0.0, 0.5)\n2-element Vector{Float64}:\n 0.6224593312018545\n 0.37754066879814546\n\n2 Parameter Logistic Model\n\njulia> beta = (a = 1.5, b = 0.5);\n\njulia> irf(TwoPL, 0.0, beta, 1)\n0.32082130082460697\n\n3 Parameter Logistic Model\n\njulia> beta = (a = 1.5, b = 0.5, c = 0.2);\n\njulia> irf(ThreePL, 0.0, beta, 1)\n0.4566570406596856\n\n4 Parameter Logistic Model\n\njulia> beta = (a = 1.5, b = 0.5, c = 0.2, d = 0.8);\n\njulia> irf(FourPL, 0.0, beta, 1)\n0.3924927804947642\n\nPartial Credit Model\n\njulia> beta = (b = -0.3, t = [-0.5, 1.3, -0.2]);\n\njulia> irf(PCM, 0.0, beta)\n4-element Vector{Float64}:\n 0.09656592461423529\n 0.07906149218108449\n 0.3915941342939724\n 0.4327784489107078\n\njulia> irf(PCM, 0.0, beta, 3)\n0.3915941342939724\n\nGeneralized Partial Credit Model\n\njulia> beta = (a = 1.3, b = 0.25, t = [0.0, 1.0]);\n\njulia> irf(GPCM, 0.0, beta)\n3-element Vector{Float64}:\n 0.27487115408319557\n 0.1986019275522736\n 0.5265269183645309\n\njulia> irf(GPCM, 0.0, beta, 1)\n0.27487115408319557\n\nRating Scale Model\n\njulia> beta = (b = 0.0, t = zeros(2));\n\njulia> irf(RSM, 0.0, beta)\n3-element Vector{Float64}:\n 0.3333333333333333\n 0.3333333333333333\n 0.3333333333333333\n\njulia> irf(RSM, 0.0, beta, 3)\n0.3333333333333333\n\n\n\n\n\n","category":"function"},{"location":"api/#ItemResponseFunctions.irf!","page":"API","title":"ItemResponseFunctions.irf!","text":"irf!(M, probs, theta, beta; scoring_function)\n\n\nAn in-place version of irf. Provides efficient computation by mutating probs in-place, thus avoiding allocation of an output vector.\n\nExamples\n\njulia> beta = (a = 1.2, b = 0.3, t = zeros(3));\n\njulia> probs = zeros(length(beta.t) + 1);\n\njulia> irf!(GPCM, probs, 0.0, beta)\n4-element Vector{Float64}:\n 0.3961927292844976\n 0.2764142877832629\n 0.19284770477416754\n 0.13454527815807202\n\njulia> probs\n4-element Vector{Float64}:\n 0.3961927292844976\n 0.2764142877832629\n 0.19284770477416754\n 0.13454527815807202\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.iif","page":"API","title":"AbstractItemResponseModels.iif","text":"iif(M, theta, beta, y)\n\n\nEvaluate the item information function of an item response model M for response y at the ability value theta given item parameters beta.\n\nIf y is omitted, the item category information functions for all categories are returned.\n\nExamples\n\n1 Parameter Logistic Model\n\njulia> iif(OnePL, 0.0, 0.0, 1)\n0.125\n\njulia> iif(OnePL, 0.0, (; b = 0.0))\n2-element Vector{Float64}:\n 0.125\n 0.125\n\n2 Parameter Logistic Model\n\njulia> iif(TwoPL, 0.0, (a = 1.3, b = 0.2))\n2-element Vector{Float64}:\n 0.2345721809921237\n 0.1808672521393781\n\n3 Parameter Logistic Model\n\njulia> iif(ThreePL, 0.0, (a = 1.5, b = 0.5, c = 0.15))\n2-element Vector{Float64}:\n 0.2830301834782102\n 0.033256997107963204\n\n4 Parameter Logistic Model\n\njulia> iif(FourPL, 0.0, (a = 2.1, b = -0.2, c = 0.15, d = 0.9))\n2-element Vector{Float64}:\n 0.1936328888005068\n 0.3995140205278245\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.expected_score","page":"API","title":"AbstractItemResponseModels.expected_score","text":"expected_score(M, theta, betas; scoring_function)\n\n\nCalculate the expected score of an item response model M at the ability value theta given a vector of item parameters betas. The values of betas are considered item parameters for different items.\n\nExpected scores are calculated from the models irf function. For details on how to pass item parameters to irf, see the respective function documentation.\n\nResponse scoring\n\nThe expected score is defined as the expected value of an observed response pattern x. Thus, the expected value for an arbitrary function f(x) can also be defined. We call the function f the scoring_function that maps responses to arbitrary values.\n\nExamples\n\n1 Parameter Logistic Model\n\njulia> betas = fill(0.0, 10);\n\njulia> expected_score(OnePL, 0.0, betas)\n5.0\n\njulia> expected_score(OnePL, 0.0, betas; scoring_function = x -> 2x)\n10.0\n\n2 Parameter Logistic Model\n\njulia> betas = fill((a = 1.5, b = 0.0), 5);\n\njulia> expected_score(TwoPL, 0.0, betas)\n2.5\n\njulia> expected_score(TwoPL, 0.0, betas; scoring_function = x -> x + 1)\n7.5\n\n3 Parameter Logistic Model\n\njulia> betas = fill((a = 0.4, b = 0.5, c = 0.1), 6);\n\njulia> expected_score(ThreePL, 0.0, betas)\n3.030896414512619\n\n4 Parameter Logistic Model\n\njulia> betas = fill((a = 1.4, b = 1.0, c = 0.15, d = 0.9), 7);\n\njulia> expected_score(FourPL, 0.0, betas)\n2.0885345850674453\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.information","page":"API","title":"AbstractItemResponseModels.information","text":"information(M, theta, betas; scoring_function)\n\n\nCalculate the test information of an item response mode M at the ability value theta given a vector of item parameters betas. The values of betas are considered item parameters for different items.\n\nThe test information is calculated from the models iif function. For details on how to pass item parameters to iif, see the respective function documentation.\n\nExamples\n\n1 Parameter Logistic Model\n\njulia> information(OnePL, 0.0, zeros(6))\n1.5\n\njulia> betas = fill((; b = 0.0), 6);\n\njulia> information(OnePL, 0.0, betas)\n1.5\n\n2 Parameter Logistic Model\n\njulia> betas = fill((; a = 1.2, b = 0.4), 4);\n\njulia> information(TwoPL, 0.0, betas)\n1.3601401228069936\n\n3 Parameter Logistic Model\n\njulia> betas = fill((; a = 1.5, b = 0.5, c = 0.2), 4);\n\njulia> information(ThreePL, 0.0, betas)\n1.1021806599852655\n\n4 Parameter Logistic Model\n\njulia> betas = fill((; a = 0.5, b = 1.4, c = 0.13, d = 0.94), 6);\n\njulia> information(FourPL, 0.0, betas)\n0.20178122985757524\n\n\n\n\n\n","category":"function"},{"location":"api/#Utilities","page":"API","title":"Utilities","text":"","category":"section"},{"location":"api/#Scoring-functions","page":"API","title":"Scoring functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"partial_credit","category":"page"},{"location":"api/#ItemResponseFunctions.partial_credit","page":"API","title":"ItemResponseFunctions.partial_credit","text":"partial_credit(n; max_score)\n\n\nReturn a scoring function that maps n response categories to a score (0, max_score).\n\nExamples\n\njulia> my_partial_credit = partial_credit(4);\n\njulia> my_partial_credit.(1:4)\n4-element Vector{Float64}:\n 0.0\n 0.3333333333333333\n 0.6666666666666666\n 1.0\n\njulia> my_partial_credit = partial_credit(5, max_score = 3);\n\njulia> my_partial_credit.(1:5)\n5-element Vector{Float64}:\n 0.0\n 0.75\n 1.5\n 2.25\n 3.0\n\n\n\n\n\n","category":"function"},{"location":"api/#Derivatives","page":"API","title":"Derivatives","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"derivative_theta\nderivative_theta!\nsecond_derivative_theta\nsecond_derivative_theta!","category":"page"},{"location":"api/#ItemResponseFunctions.derivative_theta","page":"API","title":"ItemResponseFunctions.derivative_theta","text":"derivative_theta(M, theta, beta; scoring_function)\n\n\nCalculate the derivative of the item (category) response function with respect to theta of model M given item parameters beta for response y. Returns the primal value and the first derivative.\n\nIf y is omitted, returns probabilities and derivatives for all possible responses (see also derivative_theta!).\n\n\n\n\n\n","category":"function"},{"location":"api/#ItemResponseFunctions.derivative_theta!","page":"API","title":"ItemResponseFunctions.derivative_theta!","text":"derivative_theta!(\n    M,\n    probs,\n    derivs,\n    theta,\n    beta;\n    scoring_function\n)\n\n\nCalculate the derivative of the item (category) response function with respect to theta of model M given item parameters beta for all possible responses. This function overwrites probs and derivs with the item category response probabilities and derivatives respectively.\n\n\n\n\n\n","category":"function"},{"location":"api/#ItemResponseFunctions.second_derivative_theta","page":"API","title":"ItemResponseFunctions.second_derivative_theta","text":"second_derivative_theta(M, theta, beta; scoring_function)\n\n\nCalculate the second derivative of the item (category) response function with respect to theta of model M given item parameters beta for response y. Returns the primal value, the first derivative and the second derivative.\n\nIf y is omitted, returns primals and derivatives for all possible responses (see also second_derivative_theta!).\n\n\n\n\n\n","category":"function"},{"location":"api/#ItemResponseFunctions.second_derivative_theta!","page":"API","title":"ItemResponseFunctions.second_derivative_theta!","text":"second_derivative_theta!(\n    M,\n    probs,\n    derivs,\n    derivs2,\n    theta,\n    beta;\n    scoring_function\n)\n\n\nCalculate the second derivative of the item (category) response function with respect to theta of model M given item parameters beta for response y. Returns the primal value, the first derivative, and the second derivative\n\nIf y is omitted, returns values and derivatives for all possible responses.\n\nThis function overwrites probs, derivs and derivs2 with the respective values.\n\n\n\n\n\n","category":"function"},{"location":"api/#Item-parameters","page":"API","title":"Item parameters","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ItemParameters","category":"page"},{"location":"api/#ItemResponseFunctions.ItemParameters","page":"API","title":"ItemResponseFunctions.ItemParameters","text":"struct ItemParameters{M<:ItemResponseModel, N, T<:Real}\n\nA struct representing item parameters for an item response model.\n\nFields\n\na: the item discrimination\nb: the item difficulty (location)\nc: the lower asymptote\nd: the upper asymptote\ne: the item stiffness\nt: a tuple of threshold parameters\n\nExamples\n\njulia> pars = ItemParameters(TwoPL, a = 1.5, b = 0.0)\nItemParameters{TwoParameterLogisticModel, 0, Float64}(1.5, 0.0, 0.0, 1.0, 1.0, ())\n\njulia> ItemParameters(OnePL, pars)\nItemParameters{OneParameterLogisticModel, 0, Float64}(1.0, 0.0, 0.0, 1.0, 1.0, ())\n\n\n\n\n\n","category":"type"},{"location":"#ItemResponseFunctions.jl","page":"Home","title":"ItemResponseFunctions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"ItemResponseFunctions.jl implements basic functions for Item Response Theory models. It is built based on the interface designed in AbstractItemResponseModels.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install ItemResponseFunctions.jl from the General package registry:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ItemResponseFunctions","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ItemResponseFunctions.jl exports the following functions for Item Response Theory models: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"irf: The item response function \niif: The item information function \nexpected_score: The expected score / test response function\ninformation: The test information function","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calling the function requires a model type M, a person ability theta and item parameters beta.   For a simple 1-Parameter Logistic model, ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ItemResponseFunctions\n\nbeta = (; b = 0.5)\n\nirf(OnePL, 0.0, beta, 1)\niif(OnePL, 0.0, beta, 1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"evaluates the item response function and item information function for response y at ability value 0.0 for an item with difficulty 0.5.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Given an array of item parameters (a test) and an ability value, the test response function and test information can be calculated by","category":"page"},{"location":"","page":"Home","title":"Home","text":"betas = [\n    (; b = -0.3),\n    (; b = 0.25),\n    (; b = 1.0),\n]\n\nexpected_score(OnePL, 0.0, betas)\ninformation(OnePL, 0.0, betas)","category":"page"}]
}
